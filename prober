#!/usr/bin/python

import sys,time
import easysnmp
import math
from easysnmp import Session, exceptions

#Initialising required variables
agentDetails = sys.argv[1].split(':')
frequency = float(sys.argv[2])
totalSamples = int(sys.argv[3])
oids = sys.argv[4:]
ipAddress = agentDetails[0]
port = agentDetails[1]
community = agentDetails[2]
timeouts = 0
interval = 1.0/frequency
latestOidValues = []
previousOidValues = []
previousSampleTime = time.time()
session = Session(hostname=ipAddress,remote_port=port,community=community,version=2)
oids.insert(0, '1.3.6.1.2.1.1.3.0') #Inserting SysUpTime OID

def prober_rates(sample): #Get OID values, calculate rates and print output
    global output, previousSampleTime, previousOidValues, timeouts
    latestSampleTime = time.time()
    try:
        latestOidValues = session.get(oids)
    except exceptions.EasySNMPTimeoutError:
        if sample>1:
            print("timeout - "+str(timeouts))
	    timeouts+=1
	return
    if sample>1:
        sampleTimeDiff = round(latestSampleTime - previousSampleTime, 1)
        for oidNum in range(0,len(oids)):
            if oidNum > 0 :
                if(previousOidValues[oidNum].snmp_type=='NOSUCHINSTANCE' or latestOidValues[oidNum].snmp_type=='NOSUCHINSTANCE'):
                    output = output + " | "+latestOidValues[oidNum].value
                else:
                    oidDelta = int(latestOidValues[oidNum].value) - int(previousOidValues[oidNum].value)
                    if(oidDelta<0):
                        if(latestOidValues[oidNum].snmp_type == 'COUNTER32'):
                            oidDelta = 2**32 + oidDelta
                        elif(latestOidValues[oidNum].snmp_type == 'COUNTER64'):
                            oidDelta = 2**64 + oidDelta
                    sampleRate = int(oidDelta / sampleTimeDiff)
                    output = output + " | " + str(sampleRate)
            else:
                if latestOidValues[0].value < previousOidValues[0].value:
                    output = "Agent is rebooting"
                    break
                output = str(int(latestSampleTime))
        print output
    previousOidValues = latestOidValues[:]
    previousSampleTime = latestSampleTime

if totalSamples == -1:
    timeouts = 0
    while True:
        totalSamples+=2
        startTime = time.time()
        prober_rates(totalSamples)
        if (interval - time.time() + startTime):
            time.sleep(abs(interval - (time.time()-startTime))) #Sleep untill given interval completes
else:
    sample = 0
    timeouts = 0
    while sample <= totalSamples:
        sample+=1
        startTime = time.time()
        prober_rates(sample)
        if (interval - time.time() + startTime)>0:
            time.sleep(abs(interval - (time.time()-startTime))) #Sleep untill given interval completes
    if(timeouts > 0):
        print("Total timeout samples - "+str(timeouts))


